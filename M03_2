import java.math.BigInteger;

public class Main extends Number implements Comparable<Main> {
    private BigInteger numerator;
    private BigInteger denominator;

    // Default constructor
    public Main() {
        this(BigInteger.ZERO, BigInteger.ONE);
    }

    // Parameterized constructor with BigInteger inputs
    public Main(BigInteger numerator, BigInteger denominator) {
        // Calculate the greatest common divisor using BigInteger's gcd method
        BigInteger gcd = numerator.gcd(denominator);

        // Simplify the fraction by dividing both numerator and denominator by gcd
        this.numerator = numerator.divide(gcd);
        this.denominator = denominator.divide(gcd);
    }

    // Calculate greatest common divisor using BigInteger
    private static BigInteger gcd(BigInteger n, BigInteger d) {
        return n.gcd(d);
    }

    // Getters for numerator and denominator
    public BigInteger getNumerator() {
        return numerator;
    }

    public BigInteger getDenominator() {
        return denominator;
    }

    // Addition method that returns a new Main object
    public Main add(Main secondRational) {
        BigInteger n = numerator.multiply(secondRational.denominator)
                .add(secondRational.numerator.multiply(denominator));
        BigInteger d = denominator.multiply(secondRational.denominator);
        return new Main(n, d);
    }

    // Subtraction method that returns a new Main object
    public Main subtract(Main secondRational) {
        BigInteger n = numerator.multiply(secondRational.denominator)
                .subtract(secondRational.numerator.multiply(denominator));
        BigInteger d = denominator.multiply(secondRational.denominator);
        return new Main(n, d);
    }

    // Multiplication method that returns a new Main object
    public Main multiply(Main secondRational) {
        BigInteger n = numerator.multiply(secondRational.numerator);
        BigInteger d = denominator.multiply(secondRational.denominator);
        return new Main(n, d);
    }

    // Division method that returns a new Main object
    public Main divide(Main secondRational) {
        BigInteger n = numerator.multiply(secondRational.denominator);
        BigInteger d = denominator.multiply(secondRational.numerator);
        return new Main(n, d);
    }

    // Override the toString method to format the Main number
    @Override
    public String toString() {
        if (denominator.equals(BigInteger.ONE)) {
            return numerator.toString();
        } else {
            return numerator + "/" + denominator;
        }
    }

    // Override the equals method to compare two Main objects
    @Override
    public boolean equals(Object other) {
        if ((this.subtract((Main)(other))).getNumerator().equals(BigInteger.ZERO)) {
            return true;
        } else {
            return false;
        }
    }

    // Override the intValue method from Number
    @Override
    public int intValue() {
        return (int)doubleValue();
    }

    // Override the floatValue method from Number
    @Override
    public float floatValue() {
        return (float)doubleValue();
    }

    // Override the doubleValue method from Number
    @Override
    public double doubleValue() {
        return numerator.doubleValue() / denominator.doubleValue();
    }

    // Override the longValue method from Number
    @Override
    public long longValue() {
        return (long)doubleValue();
    }

    // Implement the compareTo method for comparing Main objects
    @Override
    public int compareTo(Main o) {
        if (this.subtract(o).getNumerator().compareTo(BigInteger.ZERO) > 0) {
            return 1;
        } else if (this.subtract(o).getNumerator().compareTo(BigInteger.ZERO) < 0) {
            return -1;
        } else {
            return 0;
        }
    }

    // Main method for testing the Rational class
    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);

        // Prompt user for input
        System.out.print("Enter the first rational number (numerator denominator): ");
        BigInteger num1 = input.nextBigInteger();
        BigInteger den1 = input.nextBigInteger();

        System.out.print("Enter the second rational number (numerator denominator): ");
        BigInteger num2 = input.nextBigInteger();
        BigInteger den2 = input.nextBigInteger();

        // Create Main objects for the user input
        Main r1 = new Main(num1, den1);
        Main r2 = new Main(num2, den2);

        // Perform arithmetic operations and display results
        System.out.println(r1 + " + " + r2 + " = " + r1.add(r2));
        System.out.println(r1 + " - " + r2 + " = " + r1.subtract(r2));
        System.out.println(r1 + " * " + r2 + " = " + r1.multiply(r2));
        System.out.println(r1 + " / " + r2 + " = " + r1.divide(r2));
    }
}
