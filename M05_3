import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.Slider;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.geometry.Pos;
import javafx.geometry.Insets;
import javafx.scene.paint.Color;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;

// Define the ChangeColor class, which extends the Application class taken from JavaFX
public class ChangeColor extends Application {
    // Declare variables to hold necessary components: colorLabel and sliders for red, green, blue, and opacity strength
    private Label colorLabel;
    private Slider redSlider, greenSlider, blueSlider, opacitySlider;

    // Main method to launch the JavaFX application!
    public static void main(String[] args) {
        launch(args);
    }

    // Override the start method of the Application class to set up the primary stage
    @Override
    public void start(Stage primaryStage) {
        // Set the title of the primary stage.
        primaryStage.setTitle("Color Selector");

        // Create a label to display the selected color (RED, BLUE, OR GREEN)
        colorLabel = new Label("Color Preview");
        colorLabel.setFont(new javafx.scene.text.Font(20)); // Set font size.
        colorLabel.setAlignment(javafx.geometry.Pos.CENTER); // Align the label text to the center
        colorLabel.setPadding(new Insets(20)); // Set padding around the label for display 

        // Create sliders for red, green, blue, and opacity strength- set values
        redSlider = createSlider(0, 255, 127);
        greenSlider = createSlider(0, 255, 127);
        blueSlider = createSlider(0, 255, 127);
        opacitySlider = createSlider(0, 100, 100);
        opacitySlider.setValue(100); // Set the default value (100)

        // Listen for changes in slider values and update the color label 
        redSlider.valueProperty().addListener((obs, oldVal, newVal) -> updateColor());
        greenSlider.valueProperty().addListener((obs, oldVal, newVal) -> updateColor());
        blueSlider.valueProperty().addListener((obs, oldVal, newVal) -> updateColor());
        opacitySlider.valueProperty().addListener((obs, oldVal, newVal) -> updateColor());

        // Create a grid pane to organize the sliders and display 
        GridPane sliderPane = new GridPane();
        sliderPane.setAlignment(Pos.CENTER); // center grid
        sliderPane.setHgap(10); // Set horizontal space
        sliderPane.setVgap(5); // Set vertical space between node
        sliderPane.setPadding(new Insets(10)); //padding around the grid
        sliderPane.add(new Label("Red"), 0, 0); //label for Red slider
        sliderPane.add(redSlider, 1, 0); // Add Red slider itself
        sliderPane.add(new Label("Green"), 0, 1); // Add label for Green slider
        sliderPane.add(greenSlider, 1, 1); // Add Green slider
        sliderPane.add(new Label("Blue"), 0, 2); // Add label for Blue slider
        sliderPane.add(blueSlider, 1, 2); // Add Blue slider
        sliderPane.add(new Label("Opacity"), 0, 3); // Add label for Opacity slider
        sliderPane.add(opacitySlider, 1, 3); // Add Opacity

        // Create a border pane
        BorderPane root = new BorderPane();
        root.setTop(colorLabel); // put colorlabel at top
        root.setCenter(sliderPane); // center

        // Create a scene 
        Scene scene = new Scene(root, 400, 300); // scene size
        primaryStage.setScene(scene); // 
        primaryStage.show(); // Display stages
    }

    // initialize method to create a slider with specified ranges and values
    private Slider createSlider(int min, int max, int initialValue) {
        Slider slider = new Slider(min, max, initialValue); // Create a new Slider instance
        slider.setShowTickMarks(true); // tick marks for labeling the sliders
        slider.setShowTickLabels(true); // Show tick labels 
        slider.setMajorTickUnit(50); //
        slider.setBlockIncrement(10); // Set the block increments
        return slider; // Return to display this labeled slider
    }

    // Method to update the color of the label based on the slider value!
    private void updateColor() {
        int red = (int) redSlider.getValue(); // red amount
        int green = (int) greenSlider.getValue(); // green amount
        int blue = (int) blueSlider.getValue(); // blue amount
        double opacity = opacitySlider.getValue
