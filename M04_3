import java.util.ListIterator;
import java.util.NoSuchElementException;

public class TwoWayLinkedList<E> implements MyList<E> {

    private Node<E> head, tail;
    private int size = 0;

    public TwoWayLinkedList() {}

    public TwoWayLinkedList(E[] objects) {
        for (E object : objects) {
            add(object);
        }
    }

    @Override
    public void add(int index, E e) {
        if (index == 0) {
            addFirst(e);
        } else if (index >= size) {
            addLast(e);
        } else {
            Node<E> current = head;
            for (int i = 1; i < index; i++) {
                current = current.next;
            }
            Node<E> temp = current.next;
            current.next = new Node<>(e);
            (current.next).previous = current;
            (current.next).next = temp;
            size++;
        }
    }

    @Override
    public void addFirst(E e) {
        Node<E> newNode = new Node<>(e);
        newNode.next = head;
        if (head != null) {
            head.previous = newNode;
        }
        head = newNode;
        if (tail == null) {
            tail = head;
        }
        size++;
    }

    @Override
    public void addLast(E e) {
        if (tail == null) {
            head = tail = new Node<>(e);
        } else {
            tail.next = new Node<>(e);
            (tail.next).previous = tail;
            tail = tail.next;
        }
        size++;
    }

    @Override
    public ListIterator<E> listIterator() {
        return new LinkedListIterator(0);
    }

    @Override
    public ListIterator<E> listIterator(int index) {
        return new LinkedListIterator(index);
    }

    // Other methods from MyLinkedList interface need to be implemented as well

    private static class Node<E> {
        E element;
        Node<E> next;
        Node<E> previous;

        Node(E element) {
            this.element = element;
        }
    }

    private class LinkedListIterator implements ListIterator<E> {
        private Node<E> current;
        private int index;

        LinkedListIterator(int index) {
            if (index < 0 || index > size) {
                throw new IndexOutOfBoundsException("Invalid index");
            }
            if (index == size) {
                current = null;
            } else {
                current = head;
                for (int i = 0; i < index; i++) {
                    current = current.next;
                }
            }
            this.index = index;
        }

        @Override
        public boolean hasNext() {
            return index < size;
        }

        @Override
        public E next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            E e = current.element;
            current = current.next;
            index++;
            return e;
        }

        // Other ListIterator methods need to be implemented as well
    }
}
